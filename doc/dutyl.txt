*dutyl.txt*


Author:  Idan Arye <https://github.com/idanarye/>
License: Same terms as Vim itself (see |license|)

Version: 1.3.0

INTRODUCTION                                                         *dutyl*

Dutyl operates various Dlang tools to help you program D in Vim. Instead of
having a separate plugin for each tool, Dutyl can use multiple plugins and
use them together - for example, use DUB to get a list of import paths the
project is using and pass that list to DCD to get autocompleting for symbols
that come from libraries. Dutyl has a module(/plugin) system that allows tools
to back up each other - so for example if a project doesn't use DUB, Dutyl can
back up reading the import paths from a static configuration file.

Currently supported features:

* Getting the imports list from DUB or from a configuration file
* Autocompletion using DCD
* Finding DDoc using DCD
* Finding declarations using DCD or Dscanner
* Syntax and style checks using Dscanner
* Updating the tags file using Dscanner


REQUIREMENTS                                            *dutyl-requirements*

Dutyl requires the tools that it uses. If you want it to use DUB to get info
about the project, you need DUB(http://code.dlang.org/download). If you want
it to use DCD for autocompletion, you need
DCD(https://github.com/Hackerpilot/DCD). If you want it to use Dscanner, you
need Dscanner(https://github.com/Hackerpilot/Dscanner).


CONFIGURATION                                          *dutyl-configuration*

Use *g:dutyl_stdImportPaths* to specify the standard library import paths.
Example: >
	let g:dutyl_stdImportPaths=['/usr/include/dlang/dmd']
<
You must either set g:dutyl_stdImportPaths or configure these paths in DCD
itself, or else DCD won't be able to recognize standard library symbols.

If you want to never add the closing paren in calltips completions, set
*g:dutyl_neverAddClosingParen* to 1: >
	let g:dutyl_neverAddClosingParen=1
<
Dutyl will assume that tools are in the system's PATH. If they are not, you'll
have to supply the path for them using *dutyl#register#tool* like so: >
	call dutyl#register#tool('dcd-client','/path/to/DCD/dcd-client')
	call dutyl#register#tool('dcd-server','/path/to/DCD/dcd-server')
<
Note: If you are using a plugin manager(like Pathogen or Vundle), make sure
that you only call |dutyl#register#tool| after you run the plugin manager's
command for updating the runtime path(pathogen#infect in case of Pathogen,
vundle#end in case of Vundle, or whatever the command is for whatever the tool
you are using).

Under Windows, Dutyl uses VimProc(https://github.com/Shougo/vimproc.vim) when
available to prevent opening a console windows every time a command needs to
be ran. To prevent using VimProc, set *g:dutyl_dontUseVimProc* to 1: >
	let g:dutyl_dontUseVimProc=1
<

Dutyl will use a local file named "tags" for tags. If you want to everride
this, set *g:dutyl_tagsFileName* to the name of the new tags file: >
    let g:dutyl_tagsFileName='newnamefortagsfile'
<
Note that the new tags file name will still have to be in |'tags'| in order
for Vim to recognize it.


DCD SERVER                                                *dutyl-dcd-server*

Dutyl can not use DCD if the DCD server is not running. To start the DCD
server, use *:DUDCDstartServer*. To stop it, use *:DUDCDstopServer*


CONFIG FILE                                              *dutyl-config-file*

The config file contains information about the project, and is useful when
that information can not be gathered automatically from DUB(usually because
it's not a DUB project).

The config file is named ".dutyl.configFile" and it is a serialization of a
Vim |Dictionary|.

The config file can contain a list of import paths for the project. The source
code of the project must be one of them - Dutyl won't guess for you whether or
not you are using a dedicated folder for the source files and what's it's
name. To edit that list, run |:DUConfigFileEditImportPaths|. It'll open buffer
where you write each import path in a separate line and when you save that
buffer it'll be written to the config file.


DUB                                                              *dutyl-dub*

If the project's folder has "dub.json" or "package.json", Dutyl will use DUB
to automatically figure out the import paths.

Note: If the project file is badly formatted(rejected by DUB), or if contains
dependencies that have not yet been downloaded by DUB, Dutyl's call to DUB
will fail and it won't be able to get the import paths.


AUTOCOMPLETE                                            *dutyl-autocomplete*

Autocomplete requires DCD(see |dutyl-dcd-server|) and either DUB or a config
file.

The autocomplete omnifunc is set automatically when you edit a D source file.


DDOC-PRINTING                                          *dutyl-ddoc-printing*

DDoc printing requires DCD(see |dutyl-dcd-server|) and either DUB or a config
file.

Place the cursor on a symbol and run *:DUddoc* to print all DDocs associated
with that symbol.


JUMP-TO-DECLARATION                              *dutyl-jump-to-declaration*

Jumping to declaration either DCD(see |dutyl-dcd-server|) or Dscanner and
either DUB or a config file.

Place the cursor on a symbol and run *:DUjump* to jump to the declaration of
that symbol.

You can also send the symbol you are looking for as an argument to :DUjump. In
that case, DCD will be ignored and only Dscanner can be used for the
searching.

Using bang(:DUjump!) will force Dutyl to ignore the context and jump by text
only. This will use Dscanner, which might slow down the process, but is useful
when DCD can't track the declaration from the place where it is used.

*:DUsjump* and *:DUvjump* split the window horizontally or vertically before
they jump. They will not split the window when Dutyl can't find the symbol or
when the user canceled the search.


SYNTAX-AND-STYLE-CHECKS                                  *dutyl-style-check*

Syntax and style checks requires Dscanner.

Use *:DUsyntaxCheck* to run a syntax check and store the results in the
quickfix list.

Use *:DUlsyntaxCheck* to run a syntax check and store the results in the
location list.

Use *:DUstyleCheck* to run a style check and store the results in the quickfix
list.

Use *:DUlstyleCheck* to run a style check and store the results in the
location list.

All these commands accept as arguments file names to perform the check on. If
no file name is given, the tool will decide which files to check. In case of
Dscanner(currently the only tool that does these checks) it'll use all the D
files in the working directory and it's sub-directories.

All these commands will jump to the first syntax/style error/warning - unless
invoked with a bang(eg. :DUsyntaxCheck!).


UPDATE-CTAGS                                            *dutyl-update-ctags*

CTags updating checks requires Dscanner.

Use *:DUupdateCTags* to update the CTags. The tags will be written to a local
file named "tags", unless |g:dutyl_tagsFileName| is set.
